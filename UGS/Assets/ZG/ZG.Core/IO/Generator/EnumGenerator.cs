using Hamster.ZG;
using Hamster.ZG.IO;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ZG.Core.IO.Generator
{
    public class EnumGenerator : ICodeGenerator
    {
        System.Action<string> onGenerateCallback;
        private string enumName;
        private string @namespace = null;
        private string Def = @"
/* Generated By Unity Google Sheet Enum Generator*/
/* author : shlifedev@gmail.com */

using System;
//@namespace
namespace Hamster.ZG.Type
{
[Type(type : typeof(@enumName), speractors : new string[] { ""@enumName"" })]
 public class @enumNameEnumType : IType{
 
        public object DefaultValue => default;


        public object Read(string value)
        {
            return (@enumName)Enum.Parse(typeof(@enumName), value); 
        }


        public string Write(object value)
        {
            return value.ToString();
        }
    }
}
";
        public EnumGenerator(string @namespace, string enumName, System.Action<string> onGenerateCallback = null)
        {
            this.@namespace = @namespace;
            this.enumName = enumName;
            this.onGenerateCallback = onGenerateCallback;
        }
        public string Generate()
        { 
            var result = Def.Replace("@namespace", "\n using " + this.@namespace +";");
                result = result.Replace("@enumName", enumName);
            onGenerateCallback?.Invoke(result); 
            return result;
            
        }
    }
}


